# Minimal GraphQL schema for profiles and messaging
# AppSync Auth: Cognito User Pools

scalar AWSDateTime

type UserProfile {
  userId: ID!
  username: String!
  avatar: String
  status: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Message {
  messageId: ID!
  senderId: ID!
  receiverId: ID!
  content: String!
  timestamp: AWSDateTime!
  status: String!
}

input UpdateUserProfileInput {
  username: String
  avatar: String
  status: String
}

input SendMessageInput {
  receiverId: ID!
  content: String!
}

type MessageConnection {
  items: [Message!]!
  nextToken: String
}

type Query {
  getUserProfile(userId: ID!): UserProfile
  listMessages(withUserId: ID!, limit: Int, nextToken: String): MessageConnection
}

type Mutation {
  updateUserProfile(input: UpdateUserProfileInput!): UserProfile
  sendMessage(input: SendMessageInput!): Message
}

# For AppSync, configure the subscription resolver to filter by receiverId
# or implement with a pipeline resolver.

type Subscription {
  onMessageToUser(receiverId: ID!): Message
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
